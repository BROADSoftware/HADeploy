
# ------------------------------------------------------------------------------ Handle supervisor stuff

{{% for scopeName, scope in data.supervisors.scopeByName.iteritems() %}}
{{% if scope.supervisorsToManage is defined and scope.supervisorsToManage|length > 0  %}}
- hosts: {{{ scopeName }}}
  any_errors_fatal: {{{ src.exit_on_fail }}}
  tasks:
  - name: Install supervisor package
    yum: name=supervisor  state=present  
  # ----------------- Create supervisor_xxxx folders
  - name: create Supervisor folders
    file: state=directory path={{item.path}} owner={{item.user}} group={{item.group}} mode="0755"
    with_items:
{{% for s in scope.supervisorsToManage %}}
    - { path: {{{s.logs_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
    - { path: {{{s.pid_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
    - { path: {{{s.socks_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
    - { path: {{{s.include_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
{{% endfor %}}
    loop_control:
      label: "{{item.path}} user:{{item.user}}"
  
  
  # ----------------- Setup configuration file
{{% for s in scope.supervisorsToManage %}}
  - name: Get current state for supervisord_{{{ s.name }}}
    command: systemctl is-active supervisord_{{{ s.name }}}.service
    register: supervisor_{{{ s.name }}}
    changed_when: false
    failed_when: false

  - name: Setup configuration file {{{s.conf_file_dst}}}
    template: src={{{s.conf_file_src_j2}}} dest={{{s.conf_file_dst}}} owner={{{s.user}}} group={{{s.group}}} mode="0644"
    notify: 
    - reload_supervisord_{{{s.name}}}
    
  - name: Setup supervisord_{{{s.name}}}.service
    template: src="{{{ s.service_unit_j2 }}}" dest="/usr/lib/systemd/system/supervisord_{{{s.name}}}.service" owner=root group=root mode="0644" 
    notify: 
    - "reload_supervisord_{{{s.name}}}"
    - "reload_systemd"
    
  - name: Setup {{{s.supervisorctl}}}
    template: src="{{{ s.supervisorctl_j2 }}}" dest="{{{s.supervisorctl}}}" owner=root group=root mode="0755"
{{% endfor %}}


# --------------------------------------------------- Supervisor state management
  - meta: flush_handlers

{{% for s in scope.supervisorsToManage %}}
  - name: Adjust {{{s.name}}} service state
    systemd:
      name: supervisord_{{{s.name}}}.service
      enabled: {{{ s.enabled }}}
{{% if s.state == "started" or s.state == "stopped" %}}
      state: {{{ s.state }}}
{{% endif %}}      
{{% endfor %}}


  handlers:
  - name: Reload systemd service file
    command: "systemctl daemon-reload"
    listen: "reload_systemd"

{{% for s in scope.supervisorsToManage %}}
  - name: Restart supervisord_{{{s.name}}} service
    systemd: name=supervisord_{{{s.name}}}.service state=restarted
    listen: reload_supervisord_{{{s.name}}}
    when: supervisor_{{{ s.name }}}.rc == 0
{{% endfor %}}
  
{{% endif %}}      

{{% endfor %}}

# ------------------------------------------------------------------------------ Handle supervisor_programs stuff

{{% for scopeName, scope in data.supervisors.scopeByName.iteritems() %}}
{{% if scope.programsToManage is defined and scope.programsToManage|length > 0 %}}
- hosts: {{{ scopeName }}}
  any_errors_fatal: {{{ src.exit_on_fail }}}
  tasks:

{{% for prg in scope.programsToManage %}}
  - name: Get current state for supervisor_{{{prg.supervisor}}}_{{{prg.name}}} programs
    shell: "supervisorctl -c {{{ prg.supervisorConf }}} status '{{{prg._name_}}}' | awk '{ print $2 }'"
    register: supervisor_{{{prg.supervisor}}}_{{{prg.name}}} 
    changed_when: false
    failed_when: false

#  - debug: msg="Program {{{prg.supervisor}}}_{{{prg.name}}} is  {{supervisor_{{{prg.supervisor}}}_{{{prg.name}}}.stdout}}"
{{% endfor %}}

{{% for prg in scope.programsToManage %}}
  - name: Setup supervisor_{{{prg.supervisor}}}_{{{prg.name}}} program configuration files
    template: src={{{prg.conf_file_src_j2}}} dest="{{{prg.conf_file_dst}}}" owner={{{prg.supervisorOwner}}} group={{{prg.supervisorGroup}}} mode=0644
    notify:
    - reload_prg_{{{prg.supervisor}}}_{{{prg.name}}}
{{% endfor %}}

{{% if scope.groupsToManage is defined and scope.groupsToManage|length > 0 %}}
{{% for grp in scope.groupsToManage %}}
  - name: Setup supervisor_{{{grp.supervisor}}}_{{{grp.name}}} group configuration files
    template: src={{{grp.conf_file_src_j2}}} dest="{{{grp.conf_file_dst}}}" owner={{{grp.supervisorOwner}}} group={{{grp.supervisorGroup}}} mode=0644
    notify:
    - reload_grp_{{{grp.supervisor}}}_{{{grp.name}}}
{{% endfor %}}
{{% endif %}}      

# --------------------------------------------------- Programs state management
  - meta: flush_handlers

{{% if scope.groupsToManage is defined and scope.groupsToManage|length > 0 %}}
  - name: Set supervisor group state
    supervisorctl: config={{ item.config }} name={{ item.name }} state={{ item.state}} 
    with_items:
{{% for grp in scope.groupsToManage %}}
    - { config: {{{ grp.supervisorConf}}}, name: "{{{grp._name_}}}", state: "present" }
{{% endfor %}}
    loop_control:
      label: "{{item.name}} --> present"
{{% endif %}}      

  - name: Set supervisor programs state
    supervisorctl: config={{ item.config }} name={{ item.name }} state={{ item.state}} 
    with_items:
{{% for prg in scope.programsToManage %}}
    - { config: {{{ prg.supervisorConf}}}, name: "{{{prg._name_}}}", state: "present" }
{{% if prg.state == "started" or prg.state == "stopped" %}}
    - { config: {{{ prg.supervisorConf}}}, name: "{{{prg._name_}}}", state: {{{prg.state}}} }
{{% endif %}}      
{{% endfor %}}
    loop_control:
      label: "{{item.name}} --> {{item.state}}"


  handlers:
{{% for prg in scope.programsToManage %}}
  - name: Restart supervisor_{{{ prg.supervisor }}} program {{{ prg.name }}}
    supervisorctl: config={{{ prg.supervisorConf }}} name="{{{ prg._name_ }}}" state=restarted
    listen: reload_prg_{{{prg.supervisor}}}_{{{prg.name}}}
    when: supervisor_{{{prg.supervisor}}}_{{{prg.name}}}.stdout.find("RUNNING") != -1

  - name: Force a reload of supervisor_{{{ prg.supervisor }}} group {{{ prg.name }}} on next restart
    supervisorctl: config={{{ prg.supervisorConf }}} name="{{{ prg._name_ }}}" state=absent
    listen: reload_prg_{{{prg.supervisor}}}_{{{prg.name}}}
    when: supervisor_{{{prg.supervisor}}}_{{{prg.name}}}.stdout.find("RUNNING") == -1
{{% endfor %}}

{{% if scope.groupsToManage is defined and scope.groupsToManage|length > 0 %}}
{{% for grp in scope.groupsToManage %}}
  - name: Force a reload of supervisor_{{{ grp.supervisor }}} program {{{ grp.name }}} on next restart
    supervisorctl: config={{{ grp.supervisorConf }}} name="{{{ grp._name_ }}}" state=absent
    listen: reload_grp_{{{grp.supervisor}}}_{{{grp.name}}}
{{% endfor %}}
{{% endif %}}      


{{% endif %}}      

{{% endfor %}}
