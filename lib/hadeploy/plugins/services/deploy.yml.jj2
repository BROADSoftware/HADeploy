


# ------------------------------------------------------------------------------ Handle systemd stuff
{{% for scopeName, scope in data.services.scopeByName.iteritems() %}}
{{% if scope.systemd is defined and scope.systemd|length > 0 %}}
- hosts: {{{ scopeName }}}
  any_errors_fatal: {{{ src.exit_on_fail }}}
  tasks:
{{% for unit in scope.systemd %}}
  - name: Get current state for '{{{ unit.name }}}
    command: systemctl is-active {{{ unit.name }}}.service
    register: unit_{{{ unit.name }}}
    changed_when: false
    failed_when: false
{{% if unit.unit_file.startswith("file://") %}}
  - name: Copy file '{{{unit._displaySrc_}}}' to '/usr/lib/systemd/system/{{{unit.name}}}.service'
    copy: src={{{unit._unit_file_}}} dest=/usr/lib/systemd/system/{{{unit.name}}}.service owner=root group=root mode="0644" 
{{% elif unit.unit_file.startswith("tmpl://")  %}}
  - name: Copy template '{{{unit._displaySrc_}}}' to '/usr/lib/systemd/system/{{{unit.name}}}.service'
    template: src={{{unit._unit_file_}}} dest=/usr/lib/systemd/system/{{{unit.name}}}.service owner=root group=root mode="0644" 
{{% endif %}}  
    notify: 
    - "reload_systemd"
    - "reload_unit_{{{unit.name}}}"
{{% endfor %}}

  - meta: flush_handlers

{{% for unit in scope.systemd %}}
  - name: Adjust {{{unit.name}}} service state
    systemd:
      name: {{{ unit.name }}}.service
      enabled: {{{ unit.enabled }}}
{{% if unit.state == "started" or unit.state == "stopped" %}}
      state: {{{ unit.state }}}
{{% endif %}}      
{{% endfor %}}

  handlers:
  - name: Reload systemd service file
    command: "systemctl daemon-reload"
    listen: "reload_systemd"
{{% for unit in scope.systemd %}}
{{% if unit.action_on_notify == "restart" %}}
  - name: Restart {{{unit.name}}} service
    systemd: name={{{ unit.name }}}.service state=restarted
{{% elif unit.action_on_notify == "reload" %}}
  - name: Reload {{{unit.name}}} service
    systemd: name={{{ unit.name }}}.service state=reloaded
{{% else %}}
  - name: Notify {{{unit.name}}} service
    debug: 
      msg="Service {{{unit.name}}} may need a restart as some configuration has changed."
{{% endif %}}
    listen: "reload_unit_{{{unit.name}}}"
    when: unit_{{{ unit.name }}}.rc == 0
{{% endfor %}}
 
{{% endif %}}      
{{% endfor %}}


# ------------------------------------------------------------------------------ Handle supervisor stuff

{{% for scopeName, scope in data.services.scopeByName.iteritems() %}}
{{% if scope.supervisors is defined and scope.supervisors|length > 0 %}}
- hosts: {{{ scopeName }}}
  any_errors_fatal: {{{ src.exit_on_fail }}}
  tasks:
  - name: Install supervisor package
    yum: name=supervisor  state=present  
  # ----------------- Create supervisor_xxxx folders
  - name: create Supervisor folders
    file: state=directory path={{item.path}} owner={{item.user}} group={{item.group}} mode="0755"
    with_items:
{{% for s in scope.supervisors %}}
    - { path: {{{s.logs_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
    - { path: {{{s.pid_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
    - { path: {{{s.socks_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
    - { path: {{{s.include_dir}}}, user: {{{s.user}}}, group: {{{s.group}}} }     
{{% endfor %}}
    loop_control:
      label: "{{item.path}} user:{{item.user}}"
  
  
  # ----------------- Setup configuration file
{{% for s in scope.supervisors %}}
  - name: Setup configuration file {{{s.conf_file_dst}}}
    template: src={{{s.conf_file_src_j2}}} dest={{{s.conf_file_dst}}} owner={{{s.user}}} group={{{s.group}}} mode="0644"
    notify: 
    - reload_supervisord_{{{s.name}}}
    
  - name: Setup supervisord_{{{s.name}}}.service
    template: src="{{{ s.service_unit_j2 }}}" dest="/usr/lib/systemd/system/supervisord_{{{s.name}}}.service" owner=root group=root mode="0644" 
    notify: 
    - "reload_supervisord_{{{s.name}}}"
    - "reload_systemd"
    
  - name: Setup {{{s.supervisorctl}}}
    template: src="{{{ s.supervisorctl_j2 }}}" dest="{{{s.supervisorctl}}}" owner=root group=root mode="0755"
{{% endfor %}}


# --------------------------------------------------- Supervisor state management
  - meta: flush_handlers

{{% for s in scope.supervisors %}}
  - name: Adjust {{{s.name}}} service state
    systemd:
      name: supervisord_{{{s.name}}}.service
      enabled: yes
      state: started
{{% endfor %}}


  handlers:
  - name: Reload systemd service file
    command: "systemctl daemon-reload"
    listen: "reload_systemd"

{{% for s in scope.supervisors %}}
  - name: Restart supervisord_{{{s.name}}} service
    systemd: name=supervisord_{{{s.name}}}.service state=restarted
    listen: reload_supervisord_{{{s.name}}}
{{% endfor %}}
    
    
  
{{% endif %}}      

{{% endfor %}}

