
# --------------------------------------------------------- Remove node to HDFS pushed files and trees

{{% for scopeName, scope in data.hdfs.nodeToHdfsByName.iteritems() %}}
{{% if scope.files|length > 0 or scope.files|length > 0 %}}
- hosts: {{{ scopeName }}}
  any_errors_fatal: {{{ src.exit_on_fail }}}
  roles:
  - hdfs_modules    
  tasks:

{{% if data.hdfs.credentialByHost[scopeName] is defined %}}
{{% if  data.hdfs.credentialByHost[scopeName]._nodeKeytabFolder_ is defined %}}
  - name: Create keytabs location
    file: path={{{ data.hdfs.credentialByHost[scopeName]._nodeKeytabFolder_}}} owner={{ansible_user}}  mode="0700" state=directory
{{%endif%}}
{{% if  data.hdfs.credentialByHost[scopeName].local_keytab_path is defined %}}
  - name: Push keytab file
    copy: src={{{data.hdfs.credentialByHost[scopeName].local_keytab_path }}} dest={{{data.hdfs.credentialByHost[scopeName].node_keytab_path }}} owner={{ansible_user}} mode="0400"
{{%endif%}}
  - name: Perform kinit for HDFS access from {{{ scopeName }}}
    shell: kinit -kt {{{ data.hdfs.credentialByHost[scopeName].node_keytab_path }}} {{{ data.hdfs.credentialByHost[scopeName].principal }}}
    changed_when: false
{{% if data.hdfs.credentialByHost[scopeName].kdebug %}} 
  - name: Check kerberos ticket for HDFS access
    shell: klist
    register: klist_result
    changed_when: false
  - debug: var=klist_result
{{%endif%}}
{{%endif%}}  
  
{{% for file in scope.files %}}
{{% if not file.no_remove %}}
  - name: Remove '{{{file._target_}}}' from HDFS
    hdfs_file: hdfs_path={{{file._target_}}} state=absent hdfs_user={{{src.hdfs_relay.user}}}
{{%endif %}}
{{% endfor %}}

{{% for tree in scope.trees %}}
{{% if not tree.no_remove %}}
  - name: Remove '{{{tree.dest_folder}}}' from HDFS
    hdfs_file: hdfs_path={{{tree.dest_folder}}} state=absent hdfs_user={{{src.hdfs_relay.user}}}
{{%endif %}}
{{% endfor %}}

{{% if data.hdfs.credentialByHost[scopeName] is defined %}}
  - name: Perform kdestroy for HDFS access from {{{ scopeName }}}
    shell: kdestroy
    changed_when: false
{{%endif%}}

{{%endif%}}
{{% endfor %}}



# --------------------------------------------------------------------------- HDFS task from hdfs relay

{{% if src.hdfs_relay is defined %}}
- hosts: {{{ src.hdfs_relay.host }}}   # This is the hdfs_relay
  any_errors_fatal: {{{ src.exit_on_fail }}}
  roles:
  - hdfs_modules    
  tasks:
{{% if  src.hdfs_relay._relayKeytabFolder_ is defined %}}
  - name: Create keytabs location
    file: path={{{ src.hdfs_relay._relayKeytabFolder_}}} owner={{ansible_user}}  mode="0700" state=directory
{{%endif%}}

{{% if  src.hdfs_relay.local_keytab_path is defined %}}
  - name: Push keytab file
    copy: src={{{src.hdfs_relay.local_keytab_path }}} dest={{{src.hdfs_relay.relay_keytab_path }}} owner={{ansible_user}} mode="0400"
{{%endif%}}


# ------------------------------------------------------------- Handle kerberos authentication for hdfs

{{% if src.hdfs_relay.kerberos %}}
  - name: Perform kinit for HDFS access
    shell: kinit -kt {{{ src.hdfs_relay.relay_keytab_path }}} {{{ src.hdfs_relay.principal }}}
    changed_when: false
{{% if src.hdfs_relay.kdebug %}} 
  - name: Check kerberos ticket for HDFS access
    shell: klist
    register: klist_result
    changed_when: false
  - debug: var=klist_result
{{%endif%}}
{{%endif%}}

# ------------------------------------------------------------------------- Remove hdfs files and trees

{{% if data.hdfs.files|length > 0 or data.hdfs.trees|length > 0 %}}
{{% for file in data.hdfs.files|reverse %}}
{{% if not file.no_remove %}}
  # ------------------------------------ Handle hdfs://{{{file._target_}}} 
  - name: Remove {{{file._target_}}} from HDFS
    hdfs_file: hdfs_path={{{file._target_}}} state=absent hdfs_user={{{src.hdfs_relay.user}}}
{{%endif %}}
{{% endfor %}}
{{% for tree in data.hdfs.trees|reverse %}}
{{% if not tree.no_remove %}}
  # ------------------------------------ Handle hdfs://{{{tree.dest_folder}}} 
  - name: Remove {{{tree.dest_folder}}} from HDFS
    hdfs_file: hdfs_path={{{tree.dest_folder}}} state=absent hdfs_user={{{src.hdfs_relay.user}}}
{{%endif %}}
{{% endfor %}}

{{%endif%}}

# --------------------------------------------------------------------- Remove hdfs folders

{{% if data.hdfs.folders is defined and data.hdfs.folders|length > 0 %}}
{{% for folder in data.hdfs.folders|reverse %}}
{{% if not folder.no_remove %}}
  - name: Remove HDFS folder {{{ folder.path }}}
    hdfs_file: hdfs_path={{{folder.path}}} state=absent{{%if src.hdfs_relay.hadoop_conf_dir is defined%}} hadoop_conf_dir={{{src.hdfs_relay.hadoop_conf_dir}}}{{%endif%}}{{%if src.hdfs_relay.webhdfs_endpoint is defined%}} webhdfs_endpoint={{{src.hdfs_relay.webhdfs_endpoint}}}{{%endif%}} hdfs_user={{{src.hdfs_relay.user}}}
{{%endif %}}
    
{{% endfor %}}
{{%endif%}}

# --------------------------------------------------- Cleanup kerberos authentication for hdfs

{{% if src.hdfs_relay.kerberos %}}
  - name: Perform kdestroy for HDFS access
    shell: kdestroy
    changed_when: false
{{%endif%}}

{{%endif%}}
# --------------------------------------------------------------------- End of HDFS task from hdfs relay

# ----------------------------------------------------------------------------- Cleanup hdfs_relay cache 

{{% if src.hdfs_relay is defined %}}
- hosts: {{{ src.hdfs_relay.host }}}
  any_errors_fatal: {{{ src.exit_on_fail }}}
  tasks:
  - name: Cleanup HADeploy cache
    file: path={{{ src.hdfs_relay.cache_folder }}}  state=absent
{{%endif%}}

  
