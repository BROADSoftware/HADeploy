#!/bin/sh


# In case we have several version is the folder, pickup the last one 
for j in $(echo {{kafka_relay_tools_folder}}/jdctopic/jdctopic*.jar)
do
	jar=$j
done

OPTS=""
JOPTS=""

if [ -f {{kafka_relay_tools_folder}}/jdctopic/setenv.sh ]; then
    . {{kafka_relay_tools_folder}}/jdctopic/setenv.sh
fi

checkJavaVersion() {
	if [[ -n "$java" ]]; then
		#echo "Check $java version"
    	version=$("$java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    	#echo version "$version"
    	if [[ "$version" > "1.7" ]]; then
    	    : 
    	    #echo "version is more than 1.7. KEEP IT"
    	else         
    	    #echo "version is less than 1.7"
    	    java=""
    	fi
	fi
}

lookupJava() {

	# First test in JAVA_HOME, if defined
	if [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
	    #echo "Found java executable in JAVA_HOME"     
	    java="$JAVA_HOME/bin/java"
		checkJavaVersion
	fi

	# If not found Lookup in path
	if [[ -z "$java" ]]; then
		java=$(type -p java)	
		if [[ -n "$java" ]]; then
	    	#echo "found java executable in PATH: $java"
			checkJavaVersion
		fi
	fi

	# if not found, lookup is some typical location
	if [[ -z "$java" ]]; then
		jps=$(ls /usr/java/jdk1.[789]*/bin/java /usr/jdk64/jdk1.[789]*/bin/java 2>/dev/null)
		for jp in $jps
		do
			java=$jp
	    	#echo "found java executable in $java"
			checkJavaVersion
			if [[ -n "$java" ]]; then
				break
			fi
		done
	fi
}

checkJava() {
	lookupJava
	if [[ -n "$java" ]]; then
		:
		#echo "Will use $java"
	else 
		echo "No valid (Version >= 1.7) java found)"
		exit 1
	fi
}



checkJar() {
	if [[ ! -f $jar ]];then
		echo "Unable to find $jar"
		exit 5
	fi
}

checkJava
checkJar



if [[ -z "$KAFKA_LIBS" ]]; then
	for KL in ${CANDIDATE_KLIBS}
	do
		if [ "$(echo ${KL}/kafka*.jar)" != "${KL}/kafka*.jar" ]; then
			KAFKA_LIBS=${KL}
			break
		fi
	done
fi

if [[ -z "$KAFKA_LIBS" ]]; then
	echo "Unable to locate a KAFKA_LIBS folder in '${CANDIDATE_KLIBS}'."
	echo "Are you sure kafka broker's libs are installed ?"
	echo "You may need to adjust this script. See comment on top"
	exit 1
fi	


CLASSPATH="$jar"
for i in ${KAFKA_LIBS}/*.jar; do
    CLASSPATH=$CLASSPATH:$i
done


$java -classpath $CLASSPATH $JOPTS com.kappaware.jdctopic.Main $OPTS "$@"



